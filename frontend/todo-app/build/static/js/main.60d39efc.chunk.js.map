{"version":3,"sources":["Constants.js","components/todo/AuthenticationService.js","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/todo/TodoDataService.js","components/todo/ListTodosComponent.jsx","components/todo/ErrorComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/FooterComponent.jsx","components/todo/LogoutComponent.jsx","api/todo/HelloWorldService.js","api/todo/CourseService.js","api/todo/ClassService.js","components/todo/WelcomeComponent.jsx","components/todo/TodoComponent.jsx","api/todo/RegisterService.js","components/todo/RegisterComponent.jsx","components/todo/CourseComponent.jsx","components/todo/CourseAddComponent.jsx","components/todo/ClassComponent.jsx","components/todo/StudentClassComponent.jsx","components/todo/StudentCourseComponent.jsx","components/todo/ClassAddComponent.jsx","components/todo/AddStudentClassComponent.jsx","components/todo/AddStudentCourseComponent.jsx","components/todo/ClassListStudentComponent.jsx","components/todo/CourseListStudentComponent.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","REACT_APP_API_BASE_URL","JPA_API_URL","todo_AuthenticationService","username","password","axios","get","concat","headers","authorization","this","createBasicAuthToken","post","window","btoa","sessionStorage","setItem","setupAxiosInterceptors","token","createJWTToken","removeItem","getItem","user","_this","interceptors","request","use","config","isUserLoggedIn","AuthenticatedRoute","AuthenticationService","react_default","a","createElement","Route","props","Redirect","to","Component","LoginComponent","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasLoginFailed","showSuccessMessage","handleChange","bind","assertThisInitialized","loginClicked","registerClicked","event","setState","defineProperty","target","name","value","_this2","executeJwtAuthenticationService","then","response","registerSuccessfulLoginForJwt","data","history","push","catch","className","type","class","placeholder","required","onChange","onClick","todo_TodoDataService","id","delete","todo","put","ListTodosComponent","console","log","todos","message","deleteTodoClicked","updateTodoClicked","addTodoClicked","refreshTodos","nextProps","nextState","getLoggedInUserName","TodoDataService","retrieveAllTodos","_this3","deleteTodo","_this4","map","key","description","moment","targetDate","format","done","toString","ErrorComponent","HeaderComponent","classURL","courseURL","href","Link","capitalize","logout","str","charAt","toUpperCase","slice","FooterComponent","LogoutComponent","Fragment","todo_HelloWorldService","todo_CourseService","todo_ClassService","teacher","classDay","classTime","course","WelcomeComponent","studentID","courseList","classList","handleSuccessfulResponse","handleError","CourseService","executeCoursePathVariableService","ClassService","executeClassPathVariableService","style","float","width","HelloWorldService","executeHelloWorldPathVariableService","match","params","error","welcomeMessage","errorMessage","TodoComponent","Date","onSubmit","validate","retrieveTodo","values","errors","length","isValid","createTodo","updateTodo","_this$state","formik_esm","initialValues","validateOnChange","validateOnBlur","enableReinitialize","component","todo_RegisterService","email","RegisterComponenet","confirmpass","hasRegisterFailed","handleBack","RegisterService","addStudent","alert","test","CourseComponent","refreshCourses","deleteCourse","addCourse","CourseAddComponent","names","ClassComponent","refreshClasses","deleteClass","addClass","StudentClassComponent","StudentCourseComponent","ClassAddComponent","AddStudentClass","studentName","addStudentClass","AddStudentCourse","addStudentCourse","ClassListStudentComponent","showStudents","displayStudentsClass","backToClass","CourseListStudentComponent","displayStudentsCourse","backToCourse","TodoApp","BrowserRouter","todo_HeaderComponent","Switch","path","exact","todo_AuthenticatedRoute","AddStudentCourseComponent","AddStudentClassComponent","RegisterComponent","todo_FooterComponent","App","todo_TodoApp","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60d39efc.chunk.js","sourcesContent":["export const API_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';\r\nexport const JPA_API_URL = 'http://localhost:8080/jpa';\r\n","import axios from 'axios'\r\nimport { API_URL } from '../../Constants'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n        //console.log('registerSuccessfulLogin')\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()","import React, { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass AuthenticatedRoute extends Component {\r\n    render() {\r\n        if (AuthenticationService.isUserLoggedIn()) {\r\n            return <Route {...this.props} />\r\n        } else {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default AuthenticatedRoute","import React, { Component } from 'react'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: 'sept',\r\n            password: '',\r\n            hasLoginFailed: false,\r\n            showSuccessMessage: false\r\n        }\r\n        // this.handleUsernameChange = this.handleUsernameChange.bind(this)\r\n        // this.handlePasswordChange = this.handlePasswordChange.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n        this.registerClicked = this.registerClicked.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        //console.log(this.state);\r\n        this.setState(\r\n            {\r\n                [event.target.name]\r\n                    : event.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n    // handleUsernameChange(event) {\r\n    //     console.log(event.target.name);\r\n    //     this.setState(\r\n    //         {\r\n    //             [event.target.name]\r\n    //               :event.target.value\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    // handlePasswordChange(event) {\r\n    //     console.log(event.target.value);\r\n    //     this.setState({password:event.target.value})\r\n    // }\r\n\r\n    loginClicked() {\r\n        //sept,dummy\r\n         //if(this.state.username==='admin' && this.state.password==='dummy'){\r\n          //   AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\r\n            // this.props.history.push(`/welcome/${this.state.username}`)\r\n//             this.setState({showSuccessMessage:true})\r\n //            this.setState({hasLoginFailed:false})\r\n    //    }\r\n      //   else {\r\n        //     this.setState({showSuccessMessage:false})\r\n         //   this.setState({hasLoginFailed:true})\r\n         //}\r\n        // AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\r\n         //this.props.history.push(`/welcome/${this.state.username}`)\r\n        // this.setState({showSuccessMessage:true})\r\n        // this.setState({hasLoginFailed:false})\r\n        // AuthenticationService\r\n        // .executeBasicAuthenticationService(this.state.username, this.state.password)\r\n        // .then(() => {\r\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\r\n        //     this.props.history.push(`/welcome/${this.state.username}`)\r\n        // }).catch( () =>{\r\n        //     this.setState({showSuccessMessage:false})\r\n        //     this.setState({hasLoginFailed:true})\r\n        // })\r\n        \r\n        AuthenticationService\r\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\r\n            .then((response) => {\r\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\r\n                this.props.history.push(`/welcome/${this.state.username}`)\r\n            }).catch(() => {\r\n                this.setState({ showSuccessMessage: false })\r\n                this.setState({ hasLoginFailed: true })\r\n            })\r\n\r\n    }\r\n\r\n    //register button goes to register page\r\n    registerClicked() {\r\n        this.props.history.push('register');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials or something is wrong</div>}\r\n                <div className=\"container\" className = \"asd\">\r\n                <h1 className = \"title\">Login</h1>\r\n                    {/*<ShowInvalidCredentials hasLoginFailed={this.state.hasLoginFailed}/>*/}\r\n                    {this.state.showSuccessMessage && <div>Login Sucessful</div>}\r\n                    {/*<ShowLoginSuccessMessage showSuccessMessage={this.state.showSuccessMessage}/>*/}\r\n                    <div className = \"comp\">\r\n                        <input type=\"text\" class = \"log\" name=\"username\" placeholder = \"User Name\" required value={this.state.username} onChange={this.handleChange} />\r\n                    </div>\r\n                    <br />\r\n                    <div className = \"comp\">\r\n                        <input type=\"password\" name=\"password\" class = \"log\" placeholder = \"Password\" required value={this.state.password} onChange={this.handleChange} />\r\n                    </div>\r\n                    <br />\r\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\r\n                    {/* register buttons function needed */}\r\n                    <button className=\"btn btn-secondary btn-register\" onClick={this.registerClicked}>Sign Up</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginComponent\r\n","import axios from 'axios'\r\nimport { API_URL, JPA_API_URL } from '../../Constants'\r\n\r\nclass TodoDataService {\r\n\r\n    retrieveAllTodos(name) {\r\n        //console.log('executed service')\r\n        return axios.get(`${JPA_API_URL}/users/${name}/todos`);\r\n    }\r\n\r\n    retrieveTodo(name, id) {\r\n        //console.log('executed service')\r\n        return axios.get(`${JPA_API_URL}/users/${name}/todos/${id}`);\r\n    }\r\n\r\n    deleteTodo(name, id) {\r\n        //console.log('executed service')\r\n        return axios.delete(`${JPA_API_URL}/users/${name}/todos/${id}`);\r\n    }\r\n\r\n    updateTodo(name, id, todo) {\r\n        //console.log('executed service')\r\n        return axios.put(`${JPA_API_URL}/users/${name}/todos/${id}`, todo);\r\n    }\r\n\r\n    createTodo(name, todo) {\r\n        //console.log('executed service')\r\n        return axios.post(`${JPA_API_URL}/users/${name}/todos/`, todo);\r\n    }\r\n\r\n}\r\n\r\nexport default new TodoDataService()","import React, { Component } from 'react'\r\nimport TodoDataService from '../../api/todo/TodoDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nimport moment from 'moment'\r\n\r\nclass ListTodosComponent extends Component {\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            todos: [],\r\n            message: null\r\n        }\r\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this)\r\n        this.updateTodoClicked = this.updateTodoClicked.bind(this)\r\n        this.addTodoClicked = this.addTodoClicked.bind(this)\r\n        this.refreshTodos = this.refreshTodos.bind(this)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('componentWillUnmount')\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('shouldComponentUpdate')\r\n        console.log(nextProps)\r\n        console.log(nextState)\r\n        return true\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount')\r\n        this.refreshTodos();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshTodos() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        TodoDataService.retrieveAllTodos(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ todos: response.data })\r\n                }\r\n            )\r\n    }\r\n    \r\n\r\n    deleteTodoClicked(id) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        //console.log(id + \" \" + username);\r\n        TodoDataService.deleteTodo(username, id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of todo ${id} Successful` })\r\n                    this.refreshTodos()\r\n                }\r\n            )\r\n\r\n    }\r\n\r\n    addTodoClicked() {\r\n        this.props.history.push(`/todos/-1`)\r\n    }\r\n\r\n    updateTodoClicked(id) {\r\n        console.log('update ' + id)\r\n        this.props.history.push(`/todos/${id}`)\r\n        // /todos/${id}\r\n        // let username = AuthenticationService.getLoggedInUserName()\r\n        // //console.log(id + \" \" + username);\r\n        // TodoDataService.deleteTodo(username, id)\r\n        //  .then (\r\n        //      response => {\r\n        //         this.setState({message : `Delete of todo ${id} Successful`})\r\n        //         this.refreshTodos()\r\n        //      }\r\n        //  )\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        return (\r\n            <div>\r\n                <h1>List Todos</h1>\r\n                {this.state.message && <div class=\"alert alert-success\">{this.state.message}</div>}\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Description</th>\r\n                                <th>Target Date</th>\r\n                                <th>IsCompleted?</th>\r\n                                <th>Update</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.todos.map(\r\n                                    todo =>\r\n                                        <tr key={todo.id}>\r\n                                            <td>{todo.description}</td>\r\n                                            <td>{moment(todo.targetDate).format('YYYY-MM-DD')}</td>\r\n                                            <td>{todo.done.toString()}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.updateTodoClicked(todo.id)}>Update</button></td>\r\n                                            <td><button className=\"btn btn-warning\" onClick={() => this.deleteTodoClicked(todo.id)}>Delete</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-success\" onClick={this.addTodoClicked}>Add</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListTodosComponent","import React from 'react'\r\n\r\nfunction ErrorComponent() {\r\n    return <div>An Error Occurred. I don't know what to do! Contact support at abcd-efgh-ijkl</div>\r\n}\r\n\r\nexport default ErrorComponent","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\n\r\nclass HeaderComponent extends Component {\r\n    render() {\r\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn();\r\n        let classURL=\"test\";\r\n        let courseURL=\"test\";\r\n        let username = AuthenticationService.getLoggedInUserName();\r\n\r\n        if(username==\"admin\"){\r\n            classURL=\"/class\";\r\n            courseURL=\"/course\";\r\n        }\r\n        else{\r\n            classURL=\"/studentclass\";\r\n            courseURL=\"/studentcourse\";\r\n        }\r\n        //console.log(isUserLoggedIn);\r\n\r\n        return (\r\n            <header>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a href=\"https://www.rmit.edu.au/\" className=\"navbar-brand\">RMIT</a></div>\r\n                    <ul className=\"navbar-nav\">\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/welcome/SEPT\">{this.capitalize(username)}</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to={courseURL}>Courses</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to={classURL}>Classes</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Groups</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Profile</Link></li>}\r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n\r\n    capitalize(str) {\r\n        if(str) return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n}\r\n\r\nexport default HeaderComponent","import React, { Component } from 'react'\r\n\r\nclass FooterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"text-muted\">All Rights Reserved 2019 @RMIT SEPT</span>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FooterComponent","import React, { Component } from 'react'\r\n\r\nclass LogoutComponent extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>You are logged out</h1>\r\n                <div className=\"container\">\r\n                    Thank You for Using Our Application.\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LogoutComponent","import axios from 'axios'\r\nimport { API_URL, JPA_API_URL } from '../../Constants'\r\n\r\nclass HelloWorldService {\r\n\r\n    executeHelloWorldService() {\r\n        //console.log('executed service')\r\n        return axios.get(`${JPA_API_URL}/hello-world`);\r\n    }\r\n\r\n    executeHelloWorldBeanService() {\r\n        //console.log('executed service')\r\n        return axios.get(`${JPA_API_URL}/hello-world-bean`);\r\n    }\r\n\r\n    executeHelloWorldPathVariableService(name) {\r\n        //console.log('executed service')\r\n        // let username = 'sept'\r\n        // let password = 'dummy'\r\n\r\n        // let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n\r\n        return axios.get(`${JPA_API_URL}/hello-world/path-variable/${name}`\r\n            // , \r\n            //     {\r\n            //         headers : {\r\n            //             authorization: basicAuthHeader\r\n            //         }\r\n            //     }\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default new HelloWorldService()","import axios from 'axios'\r\nimport { API_URL, JPA_API_URL } from '../../Constants'\r\n\r\nclass CourseService {\r\n\r\n    //finds courses based on username\r\n    executeCoursePathVariableService(username) {\r\n        return axios.get(`${JPA_API_URL}/courses/${username}`);\r\n    }\r\n\r\n    //deletes course based on ID\r\n    deleteCourse(id) {\r\n        //console.log('executed service')\r\n        return axios.delete(`${JPA_API_URL}/course/${id}`);\r\n    }\r\n\r\n    //creates course\r\n    addCourse(name, description) {\r\n        //console.log('executed service')\r\n        return axios.post(`${JPA_API_URL}/course/${name}/${description}`);\r\n    }\r\n\r\n    //adds student to existing course\r\n    addStudentCourse(id, username){\r\n        return axios.post(`${JPA_API_URL}/addStudentCourse/${id}/${username}`);\r\n    }\r\n\r\n    displayStudentsCourse(id){\r\n        return axios.get(`${JPA_API_URL}/getStudentsCourse/${id}`);\r\n    }\r\n\r\n}\r\n\r\nexport default new CourseService()","import axios from 'axios'\r\nimport { API_URL, JPA_API_URL } from '../../Constants'\r\n\r\nclass ClassService {\r\n\r\n    //finds all courses based on username\r\n    executeClassPathVariableService(username) {\r\n        return axios.get(`${JPA_API_URL}/classes/${username}`);\r\n    }\r\n\r\n    //deletes class based on ID\r\n    deleteClass(id) {\r\n        //console.log('executed service')\r\n        return axios.delete(`${JPA_API_URL}/class/${id}`);\r\n    }\r\n\r\n    //creates class\r\n    addClass(teacher, type, classDay, classTime, course) {\r\n        //console.log('executed service')\r\n        return axios.post(`${JPA_API_URL}/class/${teacher}/${type}/${classDay}/${classTime}/${course}`);\r\n    }\r\n\r\n    //adds student to existing class\r\n    addStudentClass(id, username){\r\n        return axios.post(`${JPA_API_URL}/addStudentClass/${id}/${username}`);\r\n    }\r\n\r\n    displayStudentsClass(id){\r\n        return axios.get(`${JPA_API_URL}/getStudentsClass/${id}`);\r\n    }\r\n\r\n}\r\n\r\nexport default new ClassService()","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\n\r\nclass WelcomeComponent extends Component {\r\n\r\n    \r\n    \r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: [],\r\n            studentID: [],\r\n            courseList: [],\r\n            classList: []\r\n        }\r\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\r\n        this.handleError = this.handleError.bind(this)\r\n    }\r\n\r\n    render() {\r\n        \r\n        this.username = AuthenticationService.getLoggedInUserName()\r\n\r\n        CourseService.executeCoursePathVariableService(this.username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ studentID: response.data })\r\n                }\r\n            )\r\n        CourseService.executeCoursePathVariableService(this.username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n\r\n        ClassService.executeClassPathVariableService(this.username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ classList: response.data })\r\n                }\r\n            )\r\n\r\n        return (\r\n            <>\r\n            \r\n                <h1>{this.username.toUpperCase()}</h1>\r\n                <div style = {{ float: 'left'}}>\r\n                <div className=\"container\">\r\n                    <h2>About Me</h2>\r\n                    This is the profile page of {this.username.toUpperCase()} \r\n                    <br></br>\r\n                    This is where you'll find the classes and groups you're a part of\r\n                    <br></br>\r\n                    You'll also see your friends too, in the future, hopefully.\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                \r\n                \r\n                    <h2>Details</h2>\r\n                    Name: {} <br></br>\r\n                    Email: {} <br></br>\r\n                </div>\r\n                </div>\r\n                \r\n                \r\n                <div>\r\n                <div>\r\n                \r\n                <div style = {{ float: 'right'}}>\r\n                    <h2>Course List</h2>\r\n                    <div className=\"container\" >\r\n                    \r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr  style ={{width: '50%'}}>\r\n                              \r\n                                    <th style={{width: '50%'}}>Name</th>\r\n                                    <th style={{width: '50%'}}>Description</th>\r\n                                    \r\n                                </tr>\r\n                                \r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.courseList.map(\r\n                                        courseList =>\r\n                                            <tr key={courseList.id}>\r\n                                                <td>{courseList.name}</td>\r\n                                                <td>{courseList.description}</td>\r\n                                            </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                            \r\n                        </table>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                \r\n\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    \r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                   \r\n                \r\n                <div>\r\n                <div style = {{ float: 'right'}}>\r\n                <h2>Class List</h2>\r\n                    <div className=\"container\" >\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Type</th>\r\n                                <th>Teacher</th>\r\n                                <th>Class Day</th>\r\n                                <th>Class Time</th>\r\n                                <th>Course</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.classList.map(\r\n                                    classList =>\r\n                                        <tr key={classList.id}>\r\n                                            <td>{classList.type}</td>\r\n                                            <td>{classList.teacher}</td>\r\n                                            <td>{classList.classDay}</td>\r\n                                            <td>{classList.classTime}</td>\r\n                                            <td>{classList.course}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                </div>\r\n            </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    retrieveWelcomeMessage() {\r\n        // HelloWorldService.executeHelloWorldService()\r\n        // .then( response => this.handleSuccessfulResponse(response) )\r\n\r\n        // HelloWorldService.executeHelloWorldBeanService()\r\n        // .then( response => this.handleSuccessfulResponse(response) )\r\n\r\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\r\n            .then(response => this.handleSuccessfulResponse(response))\r\n            .catch(error => this.handleError(error))\r\n    }\r\n\r\n    handleSuccessfulResponse(response) {\r\n        console.log(response)\r\n        this.setState({ welcomeMessage: response.data.message })\r\n    }\r\n\r\n    handleError(error) {\r\n\r\n        console.log(error.response)\r\n\r\n        let errorMessage = '';\r\n\r\n        if (error.message)\r\n            errorMessage += error.message\r\n\r\n        if (error.response && error.response.data) {\r\n            errorMessage += error.response.data.message\r\n        }\r\n\r\n        this.setState({ welcomeMessage: errorMessage })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default WelcomeComponent","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport TodoDataService from '../../api/todo/TodoDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass TodoComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: '',\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n\r\n        TodoDataService.retrieveTodo(username, this.state.id)\r\n            .then(response => this.setState({\r\n                description: response.data.description,\r\n                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\r\n            }))\r\n    }\r\n\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if (values.description.length < 5) {\r\n            errors.description = 'Enter atleast 5 Characters in Description'\r\n        }\r\n\r\n        if (!moment(values.targetDate).isValid()) {\r\n            errors.targetDate = 'Enter a valid Target Date'\r\n        }\r\n\r\n        return errors\r\n\r\n    }\r\n\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n\r\n        let todo = {\r\n            id: this.state.id,\r\n            description: values.description,\r\n            targetDate: values.targetDate\r\n        }\r\n\r\n        if (this.state.id === -1) {\r\n            TodoDataService.createTodo(username, todo)\r\n                .then(() => this.props.history.push('/todos'))\r\n        } else {\r\n            TodoDataService.updateTodo(username, this.state.id, todo)\r\n                .then(() => this.props.history.push('/todos'))\r\n        }\r\n\r\n        console.log(values);\r\n    }\r\n\r\n    render() {\r\n\r\n        let { description, targetDate } = this.state\r\n        //let targetDate = this.state.targetDate\r\n\r\n        return (\r\n            <div>\r\n                <h1>Todo</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ description, targetDate }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Target Date</label>\r\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoComponent","import axios from 'axios'\r\nimport { API_URL, JPA_API_URL } from '../../Constants'\r\n\r\nclass RegisterService {\r\n    addStudent(username, password, email) {\r\n        return axios.post(`${JPA_API_URL}/${username}/${password}/${email}`);\r\n    }\r\n}\r\n\r\nexport default new RegisterService()","import React, { Component } from 'react'\r\nimport RegisterService from '../../api/todo/RegisterService.js'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nclass RegisterComponenet extends Component {\r\n    \r\n     //Username, Pass, Confirm Pass, Email\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confirmpass: '',\r\n            email: '',\r\n            hasRegisterFailed: false,\r\n            showSuccessMessage: false\r\n        }\r\n        // this.handleChange = this.handleChange.bind(this)\r\n        // this.handleSubmit = this.handleSubmit.bind(this)\r\n        // this.handleConfirmPass = this.handleConfirmPass.bind(this)\r\n        this.handleBack = this.handleBack.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n\r\n    // handleChange(event) {\r\n    //     //console.log(this.state);\r\n    //     this.setState(\r\n    //         {\r\n    //             [event.target.name]\r\n    //                 : event.target.value\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    // //pop up if passwords not match. otherwise then\r\n    // handleSubmit(event) {\r\n    //     if(this.state.password != this.state.confirmpass) {\r\n    //         alert(\"password doesn't match\");\r\n    //         event.preventDefault();\r\n    //     }\r\n    //     //something is wrong, need to fix\r\n    //     else {\r\n    //         // RegisterService.addStudent(this.state.username, this.state.password, this.state.email)\r\n    //         // .then(\r\n    //         //     response => {\r\n    //         //        // this.setState({message: 'Successfully registered student'})\r\n    //         //        this.props.history.push('login');       \r\n    //         //     }\r\n    //         // ).catch(() => {\r\n    //         //     this.setState({ hasRegister: true })\r\n    //         // })\r\n\r\n    //         //for now\r\n    //         RegisterService.addStudent(this.state.username, this.state.password, this.state.email)\r\n    //         this.props.history.push('login'); \r\n    //     }\r\n    // }\r\n\r\n    //redirects back to login via back button\r\n    handleBack(event) {\r\n        this.props.history.push('login');\r\n    }\r\n\r\n    // //password and confirm pass must match, or else color goes red. Maybe also a minimum amount of characters required in the future\r\n    // handleConfirmPass(event) {\r\n    //     var x =  document.getElementById('confirm');\r\n    //     if(this.state.confirmpass != this.state.password) {\r\n    //         x.style.color = \"red\";\r\n    //     }\r\n    //     else {\r\n    //         x.style.color = \"black\";\r\n            \r\n    //     }\r\n    //     this.setState(\r\n    //         {\r\n    //             [event.target.name]\r\n    //                 : event.target.value\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    onSubmit(event) {\r\n        console.log(this.state.username);\r\n            RegisterService.addStudent(this.state.username,this.state.password, this.state.email)\r\n            .then(\r\n                response => {\r\n                   this.props.history.push('login');       \r\n                }\r\n            ).catch(() => {\r\n                alert(\"something is wrong\");\r\n                this.props.history.push('register');\r\n            })\r\n    }\r\n\r\n    validate(event) {\r\n        let errors = {};\r\n        var regUser = /^([a-zA-Z])*$/;\r\n        if(!event.username) {\r\n            errors.username = 'Please Add a Username';\r\n        } else if (!regUser.test(event.username)) {\r\n            errors.username = 'Invalid username address';\r\n          }\r\n\r\n        if(event.password.length < 5) {\r\n            errors.confirmpass = 'Password must be at least 5 characters'\r\n        }\r\n        if(event.password != event.confirmpass) {\r\n            errors.confirmpass = 'Password must match'\r\n        }\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        // return  (\r\n        //     <div>\r\n        //         {this.state.hasRegisterFailed && <div className=\"alert alert-warning\">The username is taken</div>}\r\n        //         <div className = \"container, asd\">\r\n        //             <form onSubmit={this.handleSubmit}>\r\n        //                 <h1>Register</h1>\r\n        //                 <input type=\"text\" className = \"log\" name=\"username\" placeholder = \"User Name\" required value={this.state.username} onChange={this.handleChange} />\r\n        //                 <br />\r\n        //                 <input type=\"password\" className = \"log\" name=\"password\" placeholder = \"Password\" required value={this.state.password} onChange={this.handleChange} />\r\n        //                 <br />\r\n        //                 <input type=\"password\" className = \"log\" id = \"confirm\" name=\"confirmpass\" placeholder = \"Confirm Password\" required value={this.state.confirmpass} onChange={this.handleConfirmPass} />\r\n        //                 <br />\r\n        //                 <input type=\"email\" className = \"log\" name=\"email\" placeholder = \"Email i.e. a@a.rmit.edu.au\" required value={this.state.email} onChange={this.handleChange} />\r\n        //                 <br />\r\n        //                 <br />\r\n        //                 <button type=\"submit\" className = \"btn btn-success\">Register</button>\r\n        //                 <button className=\"btn btn-secondary btn-register\" onClick={this.handleBack}>Back</button>\r\n        //             </form>\r\n        //         </div>\r\n        //     </div>\r\n        // )\r\n        let { username, password, confirmpass,email } = this.state\r\n        return (\r\n            <div>\r\n                <h1>Register</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ username, password, confirmpass,email  }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"username\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"password\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"confirmpass\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"email\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />                                        \r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Username</label>\r\n                                        <Field className=\"form-control log1\" type=\"text\" name=\"username\" required placeholder = \"User Name\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Password</label>\r\n                                        <Field className=\"form-control log1\" type=\"password\" name=\"password\" required placeholder = \"Password at least 5 char\"/>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Confirm Password</label>\r\n                                        <Field className=\"form-control log1\" id = \"confirm\" type=\"password\" name=\"confirmpass\" required placeholder = \"Password\"  />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Email</label>\r\n                                        <Field className=\"form-control log1\" type=\"email\" name=\"email\" required placeholder = \"Email i.e. a@a.rmit.edu.au\"/>\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Register</button>\r\n                                    <button className=\"btn btn-secondary btn-register\" onClick={this.handleBack}>Back</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterComponenet","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass CourseComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            courseList: []\r\n        }\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    //refreshes and gets courses from CourseSerivce.js\r\n    refreshCourses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CourseService.executeCoursePathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //sends ID to CourseService.js for it to be deleted\r\n    deleteCourse(id){\r\n        //console.log(id + \" \" + username);\r\n        CourseService.deleteCourse(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of course ${id} Successful` })\r\n                    this.refreshCourses()\r\n                }\r\n            )\r\n    }\r\n\r\n    //pushes the \"/addstudentcourse\" page for a student to be added to a course\r\n    addStudent(id){\r\n        //console.log(id + \" \" + username);\r\n        this.props.history.push(`/addstudentcourse/${id}`)\r\n    }\r\n\r\n    //pushes the \"/addcourse\" page for a course to be created\r\n    addCourse(){\r\n        this.props.history.push(`/addcourse`)\r\n    }\r\n\r\n    courseList(id){\r\n        this.props.history.push(`/courselist/${id}`)\r\n    }\r\n\r\n    //html render form\r\n    render() {\r\n        console.log('render')\r\n        this.refreshCourses()\r\n        return (\r\n            <div>\r\n                <h1>Course List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.courseList.map(\r\n                                    courseList =>\r\n                                        <tr key={courseList.id}>\r\n                                            <td>{courseList.name}</td>\r\n                                            <td>{courseList.description}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.deleteCourse(courseList.id)}>Delete</button></td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.addStudent(courseList.id)}>Add Student</button></td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.courseList(courseList.id)}>Course List</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        <tr>\r\n                            <td><button className=\"btn btn-success\" onClick={() => this.addCourse()}>Add</button></td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CourseComponent","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass CourseAddComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            names: '',\r\n            description: ''\r\n        }\r\n        this.addCourse = this.addCourse.bind(this)\r\n    }\r\n\r\n    //method to send values to CourseService.js which creates a new course\r\n    addCourse(values) {\r\n        CourseService.addCourse(values.name,values.description)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Adding of course ${values.name} Successful` })\r\n                    this.props.history.push(`/course`)\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render form\r\n    render() {\r\n        console.log('render')\r\n        let { names, description } = this.state\r\n        return (\r\n            <div>\r\n                <h1>Add Course</h1>\r\n                <div className=\"container\">\r\n                <Formik\r\n                        initialValues={{ names, description }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.addCourse}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Name</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"name\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CourseAddComponent","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass ClassComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            classList: []\r\n        }\r\n        this.refreshClasses = this.refreshClasses.bind(this)\r\n    }\r\n\r\n    //refreshes and gets classes from ClassService.js\r\n    refreshClasses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        ClassService.executeClassPathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ classList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //sends ID to delete class based on method in ClassService.js\r\n    deleteClass(id){\r\n        //console.log(id + \" \" + username);\r\n        ClassService.deleteClass(id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Delete of course ${id} Successful` })\r\n                    this.refreshClasses()\r\n                }\r\n            )\r\n    }\r\n\r\n    //sends ID to the addStudent page, also changes current page to \"/addstudentclass\"\r\n    addStudent(id){\r\n        //console.log(id + \" \" + username);\r\n        this.props.history.push(`/addstudentclass/${id}`)\r\n    }\r\n\r\n    //method to go to the page where you can create a class\r\n    addClass(){\r\n        this.props.history.push(`/addclass`)\r\n    }\r\n\r\n    classList(id){\r\n        this.props.history.push(`/classlist/${id}`)\r\n    }\r\n\r\n    //html render class list\r\n    render() {\r\n        console.log('render')\r\n        this.refreshClasses()\r\n        return (\r\n            <div>\r\n                <h1>Class List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Type</th>\r\n                                <th>Teacher</th>\r\n                                <th>Class Day</th>\r\n                                <th>Class Time</th>\r\n                                <th>Course</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.classList.map(\r\n                                    classList =>\r\n                                        <tr key={classList.id}>\r\n                                            <td>{classList.type}</td>\r\n                                            <td>{classList.teacher}</td>\r\n                                            <td>{classList.classDay}</td>\r\n                                            <td>{classList.classTime}</td>\r\n                                            <td>{classList.course}</td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.deleteClass(classList.id)}>Delete</button></td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.addStudent(classList.id)}>Add Student</button></td>\r\n                                            <td><button className=\"btn btn-success\" onClick={() => this.classList(classList.id)}>Class List</button></td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        <tr>\r\n                            <td><button className=\"btn btn-success\" onClick={() => this.addClass()}>Add</button></td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ClassComponent","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass StudentClassComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            classList: []\r\n        }\r\n        this.refreshClasses = this.refreshClasses.bind(this)\r\n    }\r\n    //refreshes and gets lists of classes\r\n    refreshClasses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        ClassService.executeClassPathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ classList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render class\r\n    render() {\r\n        console.log('render')\r\n        this.refreshClasses()\r\n        return (\r\n            <div>\r\n                <h1>Class List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Type</th>\r\n                                <th>Teacher</th>\r\n                                <th>Class Day</th>\r\n                                <th>Class Time</th>\r\n                                <th>Course</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.classList.map(\r\n                                    classList =>\r\n                                        <tr key={classList.id}>\r\n                                            <td>{classList.type}</td>\r\n                                            <td>{classList.teacher}</td>\r\n                                            <td>{classList.classDay}</td>\r\n                                            <td>{classList.classTime}</td>\r\n                                            <td>{classList.course}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default StudentClassComponent","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass StudentCourseComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            courseList: []\r\n        }\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    //refreshes and gets courses\r\n    refreshCourses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CourseService.executeCoursePathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render course list\r\n    render() {\r\n        console.log('render')\r\n        this.refreshCourses()\r\n        return (\r\n            <div>\r\n                <h1>Course List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Description</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.courseList.map(\r\n                                    courseList =>\r\n                                        <tr key={courseList.id}>\r\n                                            <td>{courseList.name}</td>\r\n                                            <td>{courseList.description}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default StudentCourseComponent","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass ClassAddComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            teacher: '',\r\n            type: '',\r\n            classDay: '',\r\n            classTime: '',\r\n            course: ' ',\r\n            courseList: []\r\n        }\r\n        this.addClass = this.addClass.bind(this)\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    //sends values to ClassService.js method that creates a course\r\n    addClass(values) {\r\n        ClassService.addClass(values.teacher,values.type,values.classDay,values.classTime,values.course)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Adding of class ${values.type} Successful` })\r\n                    this.props.history.push(`/class`)\r\n                }\r\n            )\r\n    }\r\n\r\n    //refreshes and gets classes from CourseService.js\r\n    refreshCourses(){\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CourseService.executeCoursePathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render form\r\n    render() {\r\n        console.log('render')\r\n        let { teacher, type, classDay, classTime, course} = this.state\r\n        this.refreshCourses()\r\n        return (\r\n            <div>\r\n                <h1>Add Class</h1>\r\n                <div className=\"container\">\r\n                <Formik\r\n                        initialValues={{ teacher, type , classDay, classTime, course}}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.addClass}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Teacher</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"teacher\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Type</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"type\" />\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Class Day</label>\r\n                                        <Field component=\"select\" name = \"classDay\">\r\n                                            <option value=\"Monday\">Monday</option>\r\n                                            <option value=\"Tuesday\">Tuesday</option>\r\n                                            <option value=\"Wednesday\">Wednesday</option>\r\n                                            <option value=\"Thursday\">Thursday</option>\r\n                                            <option value=\"Friday\">Friday</option>\r\n                                        </Field>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Class Time</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"classTime\" />\r\n                                    </fieldset>\r\n                                        <Field component=\"select\" name = \"course\">\r\n                                            {\r\n                                                this.state.courseList.map(\r\n                                                    courseList =>\r\n                                                        <option value={courseList.name}>{courseList.name}</option>\r\n                                                )\r\n                                            }\r\n                                        </Field>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ClassAddComponent","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass AddStudentClass extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            classList: [],\r\n            studentName: ''\r\n        }\r\n        this.addStudentClass = this.addStudentClass.bind(this)\r\n        this.refreshClasses = this.refreshClasses.bind(this)\r\n    }\r\n\r\n    //method to push values to ClassService.js and add student to existing course\r\n    addStudentClass(values) {\r\n        ClassService.addStudentClass(this.props.match.params.id, values.studentName)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Adding of class ${values.type} Successful` })\r\n                    this.props.history.push(`/class`)\r\n                }\r\n            )\r\n    }\r\n\r\n    //method to get classes from method in ClassService.js\r\n    refreshClasses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        ClassService.executeClassPathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ classList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render form\r\n    render() {\r\n        console.log('render')\r\n        let studentName = this.state\r\n        this.refreshClasses()\r\n        return (\r\n            <div>\r\n                <h1>Add Student</h1>\r\n                <div className=\"container\">\r\n                <Formik\r\n                        initialValues={studentName}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.addStudentClass}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                        <Field component=\"select\" name = \"studentName\">\r\n                                            <option value=\"test\">test</option>\r\n                                            <option value=\"sept\">sept</option>\r\n                                        </Field>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AddStudentClass","import React, { Component } from 'react'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass AddStudentCourse extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            courseList: [],\r\n            studentName: ''\r\n        }\r\n        this.addStudentCourse = this.addStudentCourse.bind(this)\r\n        this.refreshCourses = this.refreshCourses.bind(this)\r\n    }\r\n\r\n    //sends values to method in CourseService.js and adds student to existing course\r\n    addStudentCourse(values) {\r\n        CourseService.addStudentCourse(this.props.match.params.id, values.studentName)\r\n            .then(\r\n                response => {\r\n                    this.setState({ message: `Adding of course ${values.type} Successful` })\r\n                    this.props.history.push(`/course`)\r\n                }\r\n            )\r\n    }\r\n\r\n    //refreshes and gets courses from CourseService.js method based on username\r\n    refreshCourses() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CourseService.executeCoursePathVariableService(username)\r\n            .then(\r\n                response => {\r\n                    //console.log(response);\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    //html render form\r\n    render() {\r\n        console.log('render')\r\n        let studentName = this.state\r\n        this.refreshCourses()\r\n        return (\r\n            <div>\r\n                <h1>Add Student</h1>\r\n                <div className=\"container\">\r\n                <Formik\r\n                        initialValues={studentName}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.addStudentCourse}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                        <Field component=\"select\" name = \"studentName\">\r\n                                            <option value=\"test\">test</option>\r\n                                            <option value=\"sept\">sept</option>\r\n                                        </Field>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default AddStudentCourse","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport ClassService from '../../api/todo/ClassService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass ClassListStudentComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            classList: []\r\n        }\r\n        this.showStudents = this.showStudents.bind(this)\r\n    }\r\n\r\n    showStudents() {\r\n        ClassService.displayStudentsClass(this.props.match.params.id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ classList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    backToClass(){\r\n        this.props.history.push(`/class`)\r\n    }\r\n\r\n    //it renders the html class list. \r\n    render() {\r\n        console.log('render')\r\n        this.showStudents()\r\n        return (\r\n            <div>\r\n                <h1>Class List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Student Usernames</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.classList.map(\r\n                                    classList =>\r\n                                        <tr>\r\n                                            <td>{classList}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        <tr>\r\n                            <td><button className=\"btn btn-success\" onClick={() => this.backToClass()}>Back to Classes</button></td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ClassListStudentComponent","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport moment from 'moment'\r\nimport CourseService from '../../api/todo/CourseService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass CourseListStudentComponent extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('constructor')\r\n        super(props)\r\n        this.state = {\r\n            courseList: []\r\n        }\r\n        this.showStudents = this.showStudents.bind(this)\r\n    }\r\n\r\n    showStudents() {\r\n        CourseService.displayStudentsCourse(this.props.match.params.id)\r\n            .then(\r\n                response => {\r\n                    this.setState({ courseList: response.data })\r\n                }\r\n            )\r\n    }\r\n\r\n    backToCourse(){\r\n        this.props.history.push(`/course`)\r\n    }\r\n\r\n    //html render class list\r\n    render() {\r\n        console.log('render')\r\n        this.showStudents()\r\n        return (\r\n            <div>\r\n                <h1>Course List</h1>\r\n                <div className=\"container\">\r\n                    <table className=\"table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Student Usernames</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.courseList.map(\r\n                                    courseList =>\r\n                                        <tr>\r\n                                            <td>{courseList}</td>\r\n                                        </tr>\r\n                                )\r\n                            }\r\n                        <tr>\r\n                            <td><button className=\"btn btn-success\" onClick={() => this.backToCourse()}>Back to Courses</button></td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CourseListStudentComponent","import React, {Component} from 'react'\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport AuthenticatedRoute from './AuthenticatedRoute.jsx'\r\nimport LoginComponent from './LoginComponent.jsx'\r\nimport ListTodosComponent from './ListTodosComponent.jsx'\r\nimport ErrorComponent from './ErrorComponent.jsx'\r\nimport HeaderComponent from './HeaderComponent.jsx'\r\nimport FooterComponent from './FooterComponent.jsx'\r\nimport LogoutComponent from './LogoutComponent.jsx'\r\nimport WelcomeComponent from './WelcomeComponent.jsx'\r\nimport TodoComponent from './TodoComponent.jsx'\r\nimport RegisterComponent from './RegisterComponent.jsx'\r\nimport CourseComponent from './CourseComponent.jsx'\r\nimport CourseAddComponent from './CourseAddComponent.jsx'\r\nimport ClassComponent from './ClassComponent.jsx'\r\nimport StudentClassComponent from './StudentClassComponent.jsx'\r\nimport StudentCourseComponent from './StudentCourseComponent.jsx'\r\nimport ClassAddComponent from './ClassAddComponent.jsx'\r\nimport AddStudentClassComponent from './AddStudentClassComponent.jsx'\r\nimport AddStudentCourseComponent from './AddStudentCourseComponent.jsx'\r\nimport ClassListStudentComponent from './ClassListStudentComponent.jsx'\r\nimport CourseListStudentComponent from './CourseListStudentComponent.jsx'\r\n\r\nclass TodoApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TodoApp\">\r\n                <Router>\r\n                    <>\r\n                        <HeaderComponent/>\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={LoginComponent}/>\r\n                            <Route path=\"/login\" component={LoginComponent}/>\r\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\r\n                            <AuthenticatedRoute path=\"/course\" component={CourseComponent}/>\r\n                            <AuthenticatedRoute path=\"/addcourse\" component={CourseAddComponent}/>\r\n                            <AuthenticatedRoute path=\"/addstudentcourse/:id\" component={AddStudentCourseComponent}/>\r\n                            <AuthenticatedRoute path=\"/class\" component={ClassComponent}/>\r\n                            <AuthenticatedRoute path=\"/classlist/:id\" component={ClassListStudentComponent}/>\r\n                            <AuthenticatedRoute path=\"/courselist/:id\" component={CourseListStudentComponent}/>\r\n                            <AuthenticatedRoute path=\"/studentclass\" component={StudentClassComponent}/>\r\n                            <AuthenticatedRoute path=\"/studentcourse\" component={StudentCourseComponent}/>\r\n                            <AuthenticatedRoute path=\"/addclass\" component={ClassAddComponent}/>\r\n                            <AuthenticatedRoute path=\"/addstudentclass/:id\" component={AddStudentClassComponent}/>\r\n                            <AuthenticatedRoute path=\"/todos/:id\" component={TodoComponent}/>\r\n                            <AuthenticatedRoute path=\"/todos\" component={ListTodosComponent}/>\r\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\r\n                            <Route path=\"/register\" component={RegisterComponent}/>\r\n                            <Route component={ErrorComponent}/>\r\n                        </Switch>\r\n                        <FooterComponent/>\r\n                    </>\r\n                </Router>\r\n                {/*<LoginComponent/>\r\n                <WelcomeComponent/>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoApp","import React, { Component } from 'react';\r\n//import FirstComponent from './components/learning-examples/FirstComponent'\r\n//import SecondComponent from './components/learning-examples/SecondComponent'\r\n//import ThirdComponent from './components/learning-examples/ThirdComponent'\r\n//import Counter from './components/counter/Counter'\r\nimport TodoApp from './components/todo/TodoApp'\r\nimport './App.css';\r\nimport './bootstrap.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/*<Counter/>*/}\r\n        <TodoApp />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// class LearningComponents extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div className=\"LearningComponents\">\r\n//          My Hello World\r\n//          <FirstComponent></FirstComponent>\r\n//          <SecondComponent></SecondComponent>\r\n//          <ThirdComponent></ThirdComponent>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}